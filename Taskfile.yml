version: '3'

### TODO: update to support windows, e.g. https://github.com/joelvaneenwyk/win-flex-bison/blob/df95183c0af4ddf8a1d7a1018e9aac74c2cb9f8c/taskfile.yml#L115

# output: prefixed

vars:
  VENV_DIR: '.venv'
  PRIOR_ENV_LOCKS: '_prior_environments'
  SRC_DIR: 'comosoco'
  ENTRY_PATH:
    sh: echo "$(pwd)"

tasks:
  _show-paths:
    vars:
      VENV_ACTIVATE: '{{joinPath .ENTRY_PATH .VENV_DIR "bin" "activate"}}'
      PATH_ENVLOCKS: '{{joinPath .ENTRY_PATH .PRIOR_ENV_LOCKS}}'
    silent: true
    cmds:
      - printenv
      - echo -e "\033[0m"  # Reset color
      - echo "current directory -- $(pwd)"
      - echo "PWD -- $(PWD)"
      - echo ".ENTRY_PATH -- {{.ENTRY_PATH}}"
      - echo ".ROOT_DIR -- {{.ROOT_DIR}}"
      - echo ".USER_WORKING_DIR -- {{.USER_WORKING_DIR}}"
      - echo ".VENV_DIR -- {{.VENV_DIR}}"
      - echo ".VENV_ACTIVATE -- {{.VENV_ACTIVATE}}"
      - echo ".PATH_ENVLOCKS -- {{.PATH_ENVLOCKS}}"
      - echo ".PRIOR_ENV_LOCKS -- {{.PRIOR_ENV_LOCKS}}"
      - echo ".SRC_DIR -- {{.SRC_DIR}}"

  check-installable:
    internal: true
    preconditions:
      - test -f "pyproject.toml"

  check-install:
    internal: true
    vars:
      VENV_ACTIVATE: '{{joinPath .VENV_DIR "bin" "activate"}}'
    preconditions:
      - test -f "pyproject.toml"
      - test -f "uv.lock"
      - test -d "{{.VENV_DIR}}"
      - test -f "{{.VENV_ACTIVATE}}"

  run-zsh:
    aliases: [shell, zsh]
    internal: true
    deps: [check-install]
    vars:
      VENV_ACTIVATE: '{{joinPath .VENV_DIR "bin" "activate"}}'
    cmds:
      - >
        zsh -i -c 'source "{{.VENV_ACTIVATE}}" && {{.VENV_CMD}}'
    preconditions:
      - test -f "{{.VENV_ACTIVATE}}"

  debug-which-python:
    cmds:
      - task: run-zsh
        vars:
          VENV_CMD: 'which python'

  update-python:
    aliases: [update-deps, env-update, env-update-deps]
    deps: [check-install]
    cmds:
      - cmd: rm "uv.lock"
        ignore_error: true
      - uv lock --upgrade
      - uv sync
      # - uv sync --upgrade

  update-brew:
    desc: Update Homebrew packages if Homebrew is installed
    cmds:
      - |
        if command -v brew >/dev/null 2>&1; then
          echo "Homebrew is installed. Updating packages..."
          brew update && brew upgrade
          brew cleanup
          brew autoremove
          echo "✨ Homebrew update complete!"
        else
          # echo "❌ Homebrew is not installed. Please install it first: https://brew.sh"
          exit 1
        fi
    silent: true

  exc-git-add-remote:
    internal: true
    interactive: true
    vars:
      UPSTREAM_REMOTE: '{{default "origin" .UPSTREAM_REMOTE}}'
    cmds:
      - |
        if git remote get-url {{.UPSTREAM_REMOTE}} >/dev/null 2>&1; then
          echo "Fetching changes from {{.UPSTREAM_REMOTE}}"
        else
          echo "The upstream remote ({{.UPSTREAM_REMOTE}}) does not exist."
          git remote add {{.UPSTREAM_REMOTE}} https://github.com/daeh/comosoco-env.git
        fi

  exc-git-pull:
    internal: true
    interactive: true
    vars:
      UPSTREAM_REMOTE: '{{default "origin" .UPSTREAM_REMOTE}}'
      UPSTREAM_BRANCH: '{{default "main" .UPSTREAM_BRANCH}}'
    cmds:
      - git restore comosoco/installation-test.ipynb ### TEMP
      - git fetch {{.UPSTREAM_REMOTE}}
      - git merge {{.UPSTREAM_REMOTE}}/{{.UPSTREAM_BRANCH}}

  exc-check-git:
    desc: Check if Git is installed and initialize repository if needed
    internal: true
    cmds:
      # Check if git command exists
      - |
        if ! command -v git >/dev/null 2>&1; then
          echo "Error: Git is not installed"
          exit 1
        fi
      
      # Check if current directory is a git repository
      - |
        if ! git rev-parse --git-dir > /dev/null 2>&1; then
          echo "Not a git repository. Initializing..."
          git init
          echo "Git repository initialized successfully"
        else
          echo "Directory is already a git repository"
        fi

  reset-upstream:
    desc: "initializes git repo if it does not exist, adds remote 'upstream', does hard reset on local repo"
    prompt: "This overwrites files with the versions on the remote repository. You should backup your work before proceeding. Continue?"
    aliases: [git-reset-hard]
    silent: false
    vars:
      UPSTREAM_REMOTE: 'upstream'
      UPSTREAM_BRANCH: 'main'
    cmds:
      - task: exc-check-git
      - task: exc-git-add-remote
        vars: { UPSTREAM_REMOTE: '{{.UPSTREAM_REMOTE}}' }
        silent: true
      - git fetch '{{.UPSTREAM_REMOTE}}'
      - git reset --hard {{.UPSTREAM_REMOTE}}/{{.UPSTREAM_BRANCH}}

  pull-origin:
    desc: "required that project is a git repo"
    aliases: [git-pull-origin]
    silent: false
    vars:
      UPSTREAM_REMOTE: 'origin'
      UPSTREAM_BRANCH: 'main'
    cmds:
      - task: exc-git-pull
        vars: { UPSTREAM_REMOTE: '{{.UPSTREAM_REMOTE}}', UPSTREAM_BRANCH: '{{.UPSTREAM_BRANCH}}' }
        silent: true

  pull-upstream:
    desc: "requires that project is a git repo"
    aliases: [pull, git-pull, git-pull-upstream]
    silent: false
    vars:
      UPSTREAM_REMOTE: 'upstream'
      UPSTREAM_BRANCH: 'main'
    cmds:
      - task: exc-git-add-remote
        vars: { UPSTREAM_REMOTE: '{{.UPSTREAM_REMOTE}}' }
        silent: true
      - task: exc-git-pull
        vars: { UPSTREAM_REMOTE: '{{.UPSTREAM_REMOTE}}', UPSTREAM_BRANCH: '{{.UPSTREAM_BRANCH}}' }
        silent: true

  update:
    desc: "requires that project is a git repo"
    deps: [check-install]
    cmds:
      - task: update-brew
      - task: pull-upstream
      - task: update-python

  scrub:
    aliases: [env-scrub, env-clean]
    desc: Clean python virtual environment by removing specified files and folders
    vars:
      RM_LIST: [
          ### Files ###
          'uv.lock',
          'conda-lock.yml',
          'conda-*.lock',
          'requirements.txt',
          'requirements*.txt',
          ### Folders ###
          '{{.VENV_DIR}}',
          '.venv',
          '.ruff_cache',
          '.task',
        ]
      RM_DIR_PATTERNS: [
        '.jupyter_cache',
        '__pycache__',
        '.ipynb_checkpoints',
      ]
    ignore_error: true
    silent: true
    cmds:
      - for:
          var: RM_LIST
        cmd: |
          if [ -f "{{.ITEM}}" ]; then
            rm "{{.ITEM}}"
          elif [ -d "{{.ITEM}}" ]; then
            rm -r "{{.ITEM}}"
          fi
      - for:
          var: RM_DIR_PATTERNS
        cmd: |
          echo "Searching and removing directories matching '{{.ITEM}}'"
          find "{{.ROOT_DIR}}" -type d -name "{{.ITEM}}" -exec rm -r {} +

  install:
    aliases: [env-install]
    deps: [check-installable]
    prompt: Install python virtual env (will overwrite any existing env)?
    platforms: [darwin, linux]
    vars:
      SRC_DIR: '{{default .SRC_DIR_DEFAULT .SRC_DIR}}'
      DATE_STR_DEFAULT: '$(date +%Y-%m-%d)'
      DATE_STR: '{{default .DATE_STR_DEFAULT .DATE_STR}}'
      FNAME_PYPROJECTCOPY: 'pyproject-{{.DATE_STR}}.toml'
      FNAME_UVLOCK: 'uv-{{.DATE_STR}}.lock'
      FNAME_PIPFREEZE: 'requirements-{{.DATE_STR}}.txt'
      PATH_ENVLOCKS: '{{joinPath .ROOT_DIR .PRIOR_ENV_LOCKS}}'
      PATH_PYPROJECTCOPY: '{{joinPath .PATH_ENVLOCKS .FNAME_PYPROJECTCOPY}}'
      PATH_UVLOCK: '{{joinPath .PATH_ENVLOCKS .FNAME_UVLOCK}}'
      PATH_PIPFREEZE: '{{joinPath .PATH_ENVLOCKS .FNAME_PIPFREEZE}}'
      RM_FILE_LIST: [
        "{{.PATH_PYPROJECTCOPY}}",
        "{{.PATH_UVLOCK}}",
        "{{.PATH_PIPFREEZE}}",
      ]
    cmds:
      - task: scrub
      - for: {var: RM_FILE_LIST}
        cmd: |
          echo "looking for {{.ITEM}}"
          if [ -f "{{.ITEM}}" ]; then
            echo "removing {{.ITEM}}"
            rm "{{.ITEM}}"
          elif [ -d "{{.ITEM}}" ]; then
            echo "WARNING: {{.ITEM}} found is dir (and it should not be)!"
          fi
        silent: true
      - uv sync
      - cmd: mkdir -p "{{.PATH_ENVLOCKS}}"
        silent: true
      - cp "pyproject.toml" "{{.PATH_PYPROJECTCOPY}}"
      - cp "uv.lock" "{{.PATH_UVLOCK}}"
      - task: run-zsh 
        vars:
          VENV_CMD: "uv pip list --format=freeze > '{{.PATH_PIPFREEZE}}'" ### Has to be called using `run-zsh` because `uv pip list` uses the active python env

